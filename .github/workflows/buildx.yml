name: buildx

on:
  schedule:
    - cron: "37 05 * * *"
  pull_request:
  push:

jobs:
  buildx:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        docker-file:
          - path: 2.5
            tags: 2.5
            platforms: linux/amd64,linux/arm64,linux/arm/v7
          - path: 2.5/slim
            tags: 2.5-slim
            platforms: linux/amd64,linux/arm64,linux/arm/v7
          - path: 2.5/alpine
            tags: 2.5-alpine
            platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6
          - path: 2.6
            tags: 2.6
            platforms: linux/amd64,linux/arm64,linux/arm/v7
          - path: 2.6/slim
            tags: 2.6-slim
            platforms: linux/amd64,linux/arm64,linux/arm/v7
          - path: 2.6/alpine
            tags: 2.6-alpine
            platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6
          - path: 2.7
            tags: 2.7,latest
            platforms: linux/amd64,linux/arm64,linux/arm/v7
          - path: 2.7/slim
            tags: 2.7-slim,slim
            platforms: linux/amd64,linux/arm64,linux/arm/v7
          - path: 2.7/alpine
            tags: 2.7-alpine,alpine
            platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/386
          - path: "3.0"
            tags: "3.0"
            platforms: linux/amd64,linux/arm64,linux/arm/v7
          - path: 3.0/slim
            tags: 3.0-slim
            platforms: linux/amd64,linux/arm64,linux/arm/v7
          - path: 3.0/alpine
            tags: 3.0-alpine
            platforms: linux/amd64,linux/arm64,linux/ppc64le,linux/386,linux/arm/v7,linux/arm/v6
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prepare
        run: |
          DOCKER_IMAGE=timbru31/ruby-node

          TAGZ=$(echo ${{ matrix.docker-file.tags }} | tr "," "\n")
          VERSION=${TAGZ[0]}

          for tag in $TAGZ
          do
            TAGS="${TAGS},${DOCKER_IMAGE}:${tag}"
          done

          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Docker Buildx (build)
        uses: docker/build-push-action@v2
        if: success() && !contains(github.ref, 'master')
        with:
          push: false
          context: ./${{ matrix.docker-file.path }}
          file: ./${{ matrix.docker-file.path }}/Dockerfile
          build-args: REFRESHED_AT=$(date +%Y-%m-%d)
          platforms: ${{ matrix.docker-file.platforms }}
          tags: ${{ steps.prepare.outputs.tags }}

      - name: Docker Login
        if: success() && github.event_name != 'pull_request' && contains(github.ref, 'master')
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Buildx (push)
        uses: docker/build-push-action@v2
        if: success() && github.event_name != 'pull_request' && contains(github.ref, 'master')
        with:
          push: true
          context: ./${{ matrix.docker-file.path }}
          file: ./${{ matrix.docker-file.path }}/Dockerfile
          build-args: REFRESHED_AT=$(date +%Y-%m-%d)
          platforms: ${{ matrix.docker-file.platforms }}
          tags: ${{ steps.prepare.outputs.tags }}

      - name: Docker Check Manifest
        if: always() && github.event_name != 'pull_request' && contains(github.ref, 'master')
        run: |
          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}

      - name: Clear
        if: always() && github.event_name != 'pull_request'
        run: |
          rm -f ${HOME}/.docker/config.json
